summarize (avg_length = sum(word_length)/n(), max_word = max(word_length)) %>%
top_n(15)
filtered_word <- gather(word_length_df, attribute, value, -speaker)
ggplot(filtered_word,
aes(x = value,
y = fct_reorder2(speaker,
attribute == 'max_word',
value,
.desc = FALSE))) +
geom_point(aes(color = attribute)) +
labs(title = "How mong are the words characters use?",
x = "Number of letters",
y = "Character") +
theme(legend.position="top", legend.title=element_blank() ) +
scale_colour_discrete(labels=c("Average word", "Longest word")) +
geom_vline(xintercept=4.5)
crutches <- words_df
crutches$crutch <- crutches$word %in% stopwords()
crutches <- crutches %>%
mutate(crutch = ifelse(crutch == TRUE,1,0))
count_c <- crutches %>%
select(speaker,crutch) %>%
group_by(speaker) %>%
summarize(freq = n())
aux_c <- count_c[order(-count_c$freq),]
top_c <- head(aux_c,15)
top_c$freq <- top_c$freq/1000
ggplot(data = top_c, aes(x = fct_reorder(speaker,freq,.desc = TRUE), y = freq, fill= speaker)) +
geom_bar(stat = 'identity',colour='black') +
scale_colour_manual(values = MyPalette, aesthetics = "fill") +
labs(title="Most crutch words by character (in thousands)") +
labs(x="Character", y="Words") +
ylim(c(0,160)) +
theme(legend.position="none")
deleted_scenes <- theoffice_df %>%
filter(deleted == TRUE) %>%
select(speaker,season) %>%
group_by(speaker) %>% #,season
summarize(freq = n())
deleted_scenes$speaker <- tolower(deleted_scenes$speaker)
aux_ds <- deleted_scenes[order(-deleted_scenes$freq),]
top_deleted <- head(aux_ds,15)
#ratings$Season <- as.factor(ratings$Season)
ggplot(data = top_deleted, aes(x = fct_reorder(speaker,freq,.desc = FALSE), y = freq,fill= speaker)) +
geom_bar(stat = 'identity',colour = 'black') +
coord_flip() +
scale_colour_manual(values = MyPalette,aesthetics = "fill") +
labs(title="The main characters lost more scenes to editors") +
labs(x="", y="Scenes") +
ylim(c(0,600)) +
theme(legend.position="none")
main_and_sec_chars <- dialogues_df %>%
group_by(speaker) %>%
summarise(Freq = n()) %>%
arrange(-Freq) %>%
top_n(30) %>%
.$speaker
interact_df <- words_df %>%
mutate(word = replace_characters(word)) %>%
filter(word %in% main_and_sec_chars)
replace_characters <- function(text) {
text <- gsub("michael_scott", "michael", text)
text <- gsub("dwight_schrute", "dwight", text)
text <- gsub("jim_halpert", "jim", text)
text <- gsub("andy_bernard", "andy", text)
text <- gsub("david_wallace", "david", text)
text <- gsub("robert_california", "robert", text)
text <- gsub("ryan_howard", "ryan", text)
text <- gsub("todd_packer", "todd", text)
text <- gsub("stanley_hudson", "dwight", text)
text <- gsub("bob_vance", "bob", text)
text <- gsub("mr_scott", "michael", text)
return(text)
}
main_and_sec_chars <- dialogues_df %>%
group_by(speaker) %>%
summarise(Freq = n()) %>%
arrange(-Freq) %>%
top_n(30) %>%
.$speaker
interact_df <- words_df %>%
mutate(word = replace_characters(word)) %>%
filter(word %in% main_and_sec_chars)
get_graph <- function(character)
{
title <- paste("How many times did",character, "say each name?")
interactions <- get_interactions_by_char(character, interact_df)
aux_i <- interactions[order(-interactions$Freq),]
top_i <- head(aux_i,10)
upper_lim <- as.numeric(top_i$Freq[1]) +10
colnames(top_i) <- c('speaker','Freq')
ggplot(data = top_i, aes(x = fct_reorder(speaker,Freq,.desc = TRUE), y = Freq, fill= speaker)) +
geom_bar(stat = 'identity',colour='black') +
scale_colour_manual(values = MyPalette, aesthetics = "fill") +
labs(title=title) +
labs(x="Character", y="Mentions") +
ylim(c(0,upper_lim)) +
theme(legend.position="none")
}
get_graph("kelly")
replace_characters <- function(text) {
text <- gsub("michael_scott", "michael", text)
text <- gsub("dwight_schrute", "dwight", text)
text <- gsub("jim_halpert", "jim", text)
text <- gsub("andy_bernard", "andy", text)
text <- gsub("david_wallace", "david", text)
text <- gsub("robert_california", "robert", text)
text <- gsub("ryan_howard", "ryan", text)
text <- gsub("todd_packer", "todd", text)
text <- gsub("stanley_hudson", "dwight", text)
text <- gsub("bob_vance", "bob", text)
text <- gsub("mr_scott", "michael", text)
return(text)
}
interact_data <- function(dialogues_df)
{
main_and_sec_chars <- dialogues_df %>%
group_by(speaker) %>%
summarise(Freq = n()) %>%
arrange(-Freq) %>%
top_n(30) %>%
.$speaker
interact_df <- words_df %>%
mutate(word = replace_characters(word)) %>%
filter(word %in% main_and_sec_chars)
return(interact_df)
}
get_interactions_by_char <- function(char, interact_df) {
interact_char <- interact_df %>%
filter(speaker == char)
interactions <- table(interact_char$word) %>%
as.data.frame() %>%
arrange(-Freq)
return(interactions)
}
get_graph <- function(character)
{
title <- paste("How many times did",character, "say each name?")
interact_df <- interact_data(dialogues_df)
interactions <- get_interactions_by_char(character, interact_df)
aux_i <- interactions[order(-interactions$Freq),]
top_i <- head(aux_i,10)
upper_lim <- as.numeric(top_i$Freq[1]) +10
colnames(top_i) <- c('speaker','Freq')
ggplot(data = top_i, aes(x = fct_reorder(speaker,Freq,.desc = TRUE), y = Freq, fill= speaker)) +
geom_bar(stat = 'identity',colour='black') +
scale_colour_manual(values = MyPalette, aesthetics = "fill") +
labs(title=title) +
labs(x="Character", y="Mentions") +
ylim(c(0,upper_lim)) +
theme(legend.position="none")
}
get_graph("kelly")
get_chars_involved <- function(speaker) {
speaker %>%
unique %>%
sort %>%
paste_words("_")
}
chars_per_scene <- words_df %>%
group_by(season, episode, scene) %>%
summarise(chars = get_chars_involved(speaker)) %>%
ungroup %>%
group_by(chars) %>%
summarise(Freq = n()) %>%
arrange(-Freq)
chars_per_scene <- words_df %>%
group_by(season, episode, scene) %>%
summarise(chars = get_chars_involved(speaker)) %>%
ungroup %>%
group_by(chars) %>%
summarise(Freq = n()) %>%
arrange(-Freq)
chars_per_scene$chars <- tolower(chars_per_scene$chars)
aux_cps <- chars_per_scene[order(-chars_per_scene$Freq),]
top_cps <- head(aux_cps,25)
colnames(top_cps) <- c('speaker','Freq')
ggplot(data = top_cps, aes(x = fct_reorder(speaker,Freq,.desc = TRUE), y = Freq,fill= speaker)) +
geom_bar(stat = 'identity',colour = 'black') +
#scale_colour_manual(values = MyPalette,aesthetics = "fill") +
labs(title="Most screen time (includes time with camera man)") +
labs(x="Characters", y="Count") +
theme(axis.text.x=element_blank())+
ylim(c(0,780))
get_chars_involved <- function(speaker) {
speaker %>%
unique %>%
sort %>%
paste_words("_")
}
screen_time_graph <- function(words_df){
chars_per_scene <- words_df %>%
group_by(season, episode, scene) %>%
summarise(chars = get_chars_involved(speaker)) %>%
ungroup %>%
group_by(chars) %>%
summarise(Freq = n()) %>%
arrange(-Freq)
chars_per_scene$chars <- tolower(chars_per_scene$chars)
aux_cps <- chars_per_scene[order(-chars_per_scene$Freq),]
top_cps <- head(aux_cps,25)
colnames(top_cps) <- c('speaker','Freq')
ggplot(data = top_cps, aes(x = fct_reorder(speaker,Freq,.desc = TRUE), y = Freq,fill= speaker)) +
geom_bar(stat = 'identity',colour = 'black') +
#scale_colour_manual(values = MyPalette,aesthetics = "fill") +
labs(title="Most screen time (includes time with camera man)") +
labs(x="Characters", y="Count") +
theme(axis.text.x=element_blank())+
ylim(c(0,780))
}
screen_time_graph(words_df)
thats_what_she_said <- words_df %>%
filter(word == "thats_what_she_said") %>%
group_by(speaker) %>%
summarise(Freq = n()) %>%
arrange(-Freq)
ggplot(thats_what_she_said, aes(x=reorder(speaker, Freq), y=Freq, fill = speaker)) +
geom_col(color = 'black') +
coord_flip() +
labs(title = "    'That'\n                  -She",
x = "",
y="Total number of gags") +
scale_colour_manual(values = MyPalette, aesthetics = "fill") +
theme(legend.position="none")
gen <- read.csv(file="data/main_cast_gender.csv", header=TRUE, sep=",")
ggplot(gen, aes(x=fct_infreq(gen$gender))) +
geom_bar(aes(y=(..count..), fill = gender)) +
labs(title = "Over 2/3 of the show's main cast are male",
x = "Gender",
y = "Number of characters") +
theme(legend.position="none")
character_sex_graphh <-  function(){
gen <- read.csv(file="data/main_cast_gender.csv", header=TRUE, sep=",")
ggplot(gen, aes(x=fct_infreq(gen$gender))) +
geom_bar(aes(y=(..count..), fill = gender)) +
labs(title = "Over 2/3 of the show's main cast are male",
x = "Gender",
y = "Number of characters") +
theme(legend.position="none")
}
character_sex_graph()
character_sex_graph <-  function(){
gen <- read.csv(file="data/main_cast_gender.csv", header=TRUE, sep=",")
ggplot(gen, aes(x=fct_infreq(gen$gender))) +
geom_bar(aes(y=(..count..), fill = gender)) +
labs(title = "Over 2/3 of the show's main cast are male",
x = "Gender",
y = "Number of characters") +
theme(legend.position="none")
}
character_sex_graph()
viewers <- read.csv('data/The_office_viewers.csv')
ratings <- viewers %>%
select(colnames(viewers)[1],Episode.overall,Episode,U.S..viewers..millions.)
colnames(ratings) <- c('Season','Episode_overall','Episode','Viewers')
ratings$Season <- as.factor(ratings$Season)
ggplot(data = ratings, aes(x = Episode_overall, y = Viewers, fill = Season)) +
geom_bar(stat = 'identity',colour = "black") +
#  facet_grid(~Season) +
labs(title="Did The Office maintain its viewers hooked from start to finish?") +
labs(x="Episode", y="Viewers (in millions)") +
xlim(c(0,205)) +
ylim(c(0,25))
viewers_graph <-  function(){
viewers <- read.csv('data/The_office_viewers.csv')
ratings <- viewers %>%
select(colnames(viewers)[1],Episode.overall,Episode,U.S..viewers..millions.)
colnames(ratings) <- c('Season','Episode_overall','Episode','Viewers')
ratings$Season <- as.factor(ratings$Season)
ggplot(data = ratings, aes(x = Episode_overall, y = Viewers, fill = Season)) +
geom_bar(stat = 'identity',colour = "black") +
#  facet_grid(~Season) +
labs(title="Did The Office maintain its viewers hooked from start to finish?") +
labs(x="Episode", y="Viewers (in millions)") +
xlim(c(0,205)) +
ylim(c(0,25))
}
viewers_graph()
dialogues_by_gen_graph <- function(dialogues_df){
dialogues_by_gen <- merge(dialogues_df, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(season, gender) %>%
summarize(Freq = n())
dialogues_by_gen$season <- as.factor(dialogues_by_gen$season)
ggplot(dialogues_by_gen, aes(x = season, y = Freq, fill = gender)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = "The proportion of dialogues by gender remains constant through the show",
x = "Season",
y = "Percentage of lines") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
dialogues_by_gen_graph(dialogues_df)
## Merge for number of dialogues
gen_dialogues <- merge(dialogues_by_char, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(gender) %>%
summarize(Freq = sum(Freq)) %>%
arrange(-Freq)
plot1 <- ggplot(gen_dialogues, aes(x = reorder(gender, -Freq), y = Freq, fill = gender)) +
geom_col() +
labs(title = "Do females have more dialogues?", x = "Gender", y="Number of lines (in thousands)") +
theme(legend.position="none")
## Merge for number of words
gen_words <- merge(words_by_char, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(gender) %>%
summarize(Freq = sum(Freq)) %>%
arrange(-Freq)
plot2 <- ggplot(gen_words, aes(x = reorder(gender, -Freq), y = Freq, fill = gender)) +
geom_col() +
labs(title = "Who says more words?",
x = "Gender",
y = "Number of words (in thousands)") +
theme(legend.position="none")
grid.arrange(plot1, plot2, ncol=2)
dialogues_gender_graph <- function(){
## Merge for number of dialogues
gen_dialogues <- merge(dialogues_by_char, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(gender) %>%
summarize(Freq = sum(Freq)) %>%
arrange(-Freq)
plot1 <- ggplot(gen_dialogues, aes(x = reorder(gender, -Freq), y = Freq, fill = gender)) +
geom_col() +
labs(title = "Do females have more dialogues?", x = "Gender", y="Number of lines (in thousands)") +
theme(legend.position="none")
## Merge for number of words
gen_words <- merge(words_by_char, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(gender) %>%
summarize(Freq = sum(Freq)) %>%
arrange(-Freq)
plot2 <- ggplot(gen_words, aes(x = reorder(gender, -Freq), y = Freq, fill = gender)) +
geom_col() +
labs(title = "Who says more words?",
x = "Gender",
y = "Number of words (in thousands)") +
theme(legend.position="none")
grid.arrange(plot1, plot2, ncol=2)
}
dialogues_gender_graph()
library(R.utils)
function_files <- sourceDirectory("functions")
for (file in function_files){
source(file, local = TRUE)
}
get_libraries()
vars <-  get_vars(theoffice_df)
View(get_vars)
View(get_vars)
View(get_data)
library(R.utils)
function_files <- sourceDirectory("functions")
for (file in function_files){
source(file, local = TRUE)
}
get_libraries()
theoffice_df <- get_data()
vars <-  get_vars(theoffice_df)
wrylies_dialogue_df <- vars[[1]]
dialogues_df <- vars[[2]]
words_df <-  vars[[3]]
glimpse(theoffice_df)
MyPalette <-  get_palette()
most_lines_graph(dialogues_df)
most_words_graph(words_df)
screen_distribution_graph(dialogues_df)
length_words_graph(words_df)
crutches_graph(words_df)
deleted_scenes_graph(theoffice_df)
get_graph("kelly")
screen_time_graph(words_df)
character_sex_graph()
dialogues_gender_graph()
dialogues_by_gen_graph(dialogues_df)
viewers_graph()
View(dialogues_gender_graph)
View(dialogues_gender_graph)
dialogues_gender_graph(dialogues_df)
View(dialogues_df)
View(dialogues_df)
View(dialogues_gender_graph)
View(dialogues_gender_graph)
View(dialogues_gender_graph)
View(dialogues_by_gen_graph)
View(dialogues_by_gen_graph)
View(dialogues_gender_graph)
library(R.utils)
function_files <- sourceDirectory("functions")
for (file in function_files){
source(file, local = TRUE)
}
get_libraries()
theoffice_df <- get_data()
theoffice_df <- get_data()
vars <-  get_vars(theoffice_df)
vars <-  get_vars(theoffice_df)
wrylies_dialogue_df <- vars[[1]]
dialogues_df <- vars[[2]]
words_df <-  vars[[3]]
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
function_files <- sourceDirectory("functions")
for (file in function_files){
source(file, local = TRUE)
}
get_libraries()
theoffice_df <- get_data()
vars <-  get_vars(theoffice_df)
wrylies_dialogue_df <- vars[[1]]
dialogues_df <- vars[[2]]
words_df <-  vars[[3]]
glimpse(theoffice_df)
MyPalette <-  get_palette()
knitr::opts_chunk$set(error = TRUE)
#visna(theoffice_df, sort = "b")
most_lines_graph(dialogues_df)
most_words_graph(words_df)
screen_distribution_graph(dialogues_df)
length_words_graph(words_df)
crutches_graph(words_df)
deleted_scenes_graph(theoffice_df)
get_graph("kelly")
screen_time_graph(words_df)
thats_what_she_said <- words_df %>%
filter(word == "thats_what_she_said") %>%
group_by(speaker) %>%
summarise(Freq = n()) %>%
arrange(-Freq)
ggplot(thats_what_she_said, aes(x=reorder(speaker, Freq), y=Freq, fill = speaker)) +
geom_col(color = 'black') +
coord_flip() +
labs(title = "    'That'\n                  -She",
x = "",
y="Total number of gags") +
scale_colour_manual(values = MyPalette, aesthetics = "fill") +
theme(legend.position="none")
character_sex_graph()
dialogues_gender_graph(dialogues_df)
dialogues_by_gen_graph <- function(dialogues_df){
gen <- read.csv(file="data/main_cast_gender.csv", header=TRUE, sep=",")
dialogues_by_gen <- merge(dialogues_df, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(season, gender) %>%
summarize(Freq = n())
dialogues_by_gen$season <- as.factor(dialogues_by_gen$season)
ggplot(dialogues_by_gen, aes(x = season, y = Freq, fill = gender)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = "The proportion of dialogues by gender remains constant through the show",
x = "Season",
y = "Percentage of lines") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
dialogues_by_gen_graph(dialogues_df)
View(dialogues_gender_graph)
View(dialogues_gender_graph)
View(dialogues_gender_graph)
knitr::opts_chunk$set(echo = TRUE)
library(R.utils)
function_files <- sourceDirectory("functions")
for (file in function_files){
source(file, local = TRUE)
}
get_libraries()
theoffice_df <- get_data()
vars <-  get_vars(theoffice_df)
wrylies_dialogue_df <- vars[[1]]
dialogues_df <- vars[[2]]
words_df <-  vars[[3]]
glimpse(theoffice_df)
MyPalette <-  get_palette()
knitr::opts_chunk$set(error = TRUE)
#visna(theoffice_df, sort = "b")
most_lines_graph(dialogues_df)
most_words_graph(words_df)
screen_distribution_graph(dialogues_df)
length_words_graph(words_df)
crutches_graph(words_df)
deleted_scenes_graph(theoffice_df)
get_graph("kelly")
screen_time_graph(words_df)
thats_what_she_said <- words_df %>%
filter(word == "thats_what_she_said") %>%
group_by(speaker) %>%
summarise(Freq = n()) %>%
arrange(-Freq)
ggplot(thats_what_she_said, aes(x=reorder(speaker, Freq), y=Freq, fill = speaker)) +
geom_col(color = 'black') +
coord_flip() +
labs(title = "    'That'\n                  -She",
x = "",
y="Total number of gags") +
scale_colour_manual(values = MyPalette, aesthetics = "fill") +
theme(legend.position="none")
character_sex_graph()
dialogues_gender_graph(words_df,dialogues_df)
dialogues_by_gen_graph(dialogues_df)
dialogues_by_gen_graph <- function(dialogues_df){
gen <- read.csv(file="data/main_cast_gender.csv", header=TRUE, sep=",")
dialogues_by_gen <- merge(dialogues_df, gen, all.x = TRUE) %>%
filter(gender %in% c('male', 'female')) %>%
group_by(season, gender) %>%
summarize(Freq = n())
dialogues_by_gen$season <- as.factor(dialogues_by_gen$season)
ggplot(dialogues_by_gen, aes(x = season, y = Freq, fill = gender)) +
geom_bar(position = "fill", stat = "identity") +
labs(title = "The proportion of dialogues by gender remains constant through the show",
x = "Season",
y = "Percentage of lines") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
}
viewers_graph()
